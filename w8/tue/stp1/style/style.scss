* {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

.container {
  margin-inline: auto;
  max-width: 60rem;
  padding-inline: 1.5rem;
  background-color: antiquewhite;
}

.wrapper {
  padding-block: 2rem;
  background-color: lightblue;
}

#section1 {
  .wrapper {
    display: flex;
    justify-content: center;
    align-items: start;
    gap: 1rem;
  }
}

#section2 {
  height: 200vh;
  .square {
    position: sticky;
    top: 50px;
  }
}

#section3 {
  height: 200vh;
}

.square {
  // 원래는 한번 더 div로 감싸서 flex 기능을 먹여서 가로로 나열
  //   -> block의 요소는 그대로 가지고 가되 flex처럼 쓸 수 있는 단어 단, 미묘한 gap이 생김

  width: 12.5rem;
  aspect-ratio: 1/1;
  //   &:nth-child($) : 자식 요소 중 첫번째를 지정하는 단어
  // .square:nth-of-type(1) -> square 중 첫번째 요소 지칭
  &:nth-of-type(1) {
    background-color: blue;
  }
  &:nth-of-type(2) {
    // (position 기본값: static)
    // -> (:relative)는 원래 있던 기준점에서 이동하는 것 (자기 자리를 그대로 유지하면서 이동)
    // -> (:absolute)는 독단적으로 움직일 수 있음 (*static이 아닌 position 속성이 있으면 그 부모를 따라감 / 없으면 제일 위에 단위인 body를 따라 위치값 정해짐)
    // -> (:fixed)는 화면상 그대로 위치함 (영향 X)
    // -> (:sticky)은 자신이 속한 부모 영역 내에서는 그 위치에 고정되어 있음 (부모 영역이 끝나면 더 이상 못따라감)
    background-color: yellow;
  }
  &:nth-of-type(3) {
    background-color: pink;
  }
}
